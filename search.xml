<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Typora破解</title>
    <url>/2022/04/21/Typora%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><ul>
<li><a href="https://lanzouv.com/b04cdi4if">https://lanzouv.com/b04cdi4if</a>　（含破解文件）<br>密码：dyuh</li>
</ul>
<h1 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h1><h2 id="覆盖文件"><a href="#覆盖文件" class="headerlink" title="覆盖文件"></a>覆盖文件</h2><p>将app.asar.txt后缀”.txt”去掉，并覆盖安装路径的”resources”文件夹内同名文件。</p>
<h2 id="输入序列号"><a href="#输入序列号" class="headerlink" title="输入序列号"></a>输入序列号</h2><p>打开Typora，邮箱任意填写，输入序列号：</p>
<ul>
<li>DZTX2H-6MCQZT-QL4GCT-5EBWFX</li>
<li>G7LPKN-HP4NLD-FA3BGF-6JDQ5R</li>
<li>3MH4Y8-YJWT37-G5JL9Y-UHNQDJ</li>
<li>85ZPHY-ELQ9FQ-94J3VP-D92YLU</li>
<li>VEZ7NV-USYN3G-8TL2N3-DADUG4</li>
</ul>
<p>即可直接激活。</p>
]]></content>
      <categories>
        <category>软件破解</category>
      </categories>
      <tags>
        <tag>软件安装与环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>计组笔记1：流水线CPU设计</title>
    <url>/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<h1 id="流水线冒险-hazard"><a href="#流水线冒险-hazard" class="headerlink" title="流水线冒险(hazard)"></a>流水线冒险(hazard)</h1><h2 id="结构冒险-structural-hazard"><a href="#结构冒险-structural-hazard" class="headerlink" title="结构冒险(structural hazard)"></a>结构冒险(structural hazard)</h2><p>硬件不支持多条指令在同一时钟周期执行。</p>
<p>解决方法：</p>
<p>增加功能部件</p>
<h2 id="数据冒险-data-hazard"><a href="#数据冒险-data-hazard" class="headerlink" title="数据冒险(data hazard)"></a>数据冒险(data hazard)</h2><p>数据相关</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add	x1, x2, x3</span><br><span class="line">sub	x4, x1, x5</span><br></pre></td></tr></table></figure>
<p>解决方法：</p>
<ul>
<li>阻塞</li>
<li>旁路（前递）(forwarding)</li>
</ul>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/forwarding.bmp" class="" title="流水线前递">
<p>若第一条指令是 <code>load x1</code> 则需要在第四个阶段数据才可用，对于 <code>sub</code> 指令第三个阶段的输入来说太迟了，造成 <strong>载入-使用型数据冒险</strong> ，需要使用 <strong>流水线停顿</strong> 处理。</p>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/load_use_data_hazard.bmp" class="" title="载入-使用型数据冒险">
<h2 id="控制冒险-control-hazard"><a href="#控制冒险-control-hazard" class="headerlink" title="控制冒险(control hazard)"></a>控制冒险(control hazard)</h2><p>需要根据一条指令的结果做出决定，而其他指令正在执行。</p>
<p>解决方法：</p>
<ul>
<li>阻塞</li>
<li>预测<ul>
<li>静态预测：分支总是不发生</li>
<li>动态预测：根据分支历史情况预测</li>
</ul>
</li>
</ul>
<h1 id="流水线数据通路和控制"><a href="#流水线数据通路和控制" class="headerlink" title="流水线数据通路和控制"></a>流水线数据通路和控制</h1><h2 id="流水线数据通路"><a href="#流水线数据通路" class="headerlink" title="流水线数据通路"></a>流水线数据通路</h2><p>将数据通路划分成五部分：</p>
<ol>
<li>IF：取指令</li>
<li>ID：指令译码金额读寄存器</li>
<li>EX：执行或计算地址</li>
<li>MEM：数据存储器访问</li>
<li>WB：写回</li>
</ol>
<p>PC 可以被看做一个流水线寄存器，它给IF阶段提供数据。但PC是可见体系结构的一部分，发生例外时， <strong>PC</strong> 中的内容 <strong>必须被保存</strong> ，而流水线寄存器中的内容可以被丢弃。</p>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/pipeline_datapath.bmp" class="" title="完整流水线数据通路">
<h2 id="流水线控制"><a href="#流水线控制" class="headerlink" title="流水线控制"></a>流水线控制</h2><p>根据流水线阶段将控制线分成五组：</p>
<ol>
<li>IF：读指令存储器和写 PC 控制信号总是有效，无需其他控制</li>
<li>ID：两个源寄存器总是位于相同的位置，无需其他控制</li>
<li>EX：需要设置 ALUOp 和 ALUSrc 控制 ALU 的输入选择和操作选择</li>
<li>MEM：需要设置 Branch ， MemRead 和 MemWrite 控制分支，加载和存储指令</li>
<li>WB：需要设置 MemtoReg 和 RegWrite ，控制寄存器写入</li>
</ol>
<p>对控制线的需要从 EX 阶段开始，故可以在 ID 阶段为之后阶段创建控制信号，并将控制信号保存在流水线寄存器中。</p>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/pipeline_control.bmp" class="" title="流水线控制通路">
<h1 id="流水线数据冒险：前递与停顿"><a href="#流水线数据冒险：前递与停顿" class="headerlink" title="流水线数据冒险：前递与停顿"></a>流水线数据冒险：前递与停顿</h1><p>多条数据相关指令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub	x2, x1, x3</span><br><span class="line">and	x12, x2, x5</span><br><span class="line">or	x13, x6, x2</span><br><span class="line">add	x14, x2, x2</span><br><span class="line">sd	x15, 100(x2)</span><br></pre></td></tr></table></figure>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/data_hazard_example.bmp" class="" title="多周期流水线图">
<p>在第三个时钟周期 <code>sub</code> 指令就产生结果，而 <code>and</code> 和 <code>or</code> 指令在第四和第五个周期才真正需要数据，因此只要将数据前递即可避免数据冒险。</p>
<p>WB 阶段不存在数据冒险，因为可以通过前半周期写后半周期读来解决。</p>
<p>两对冒险条件(存在冒险且不前递 <code>x0</code> 寄存器)：</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">1.EX冒险<span class="built_in"></span></span><br><span class="line"><span class="built_in">if </span>(EX/MEM.RegWrite<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(EX/MEM.RegisterRd != 0) <span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(EX/MEM.RegisterRd = ID/EX.RegisterRs1)) ForwardA = 10</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">if </span>(EX/MEM.RegWrite<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(EX/MEM.RegisterRd != 0)<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(EX/MEM.RegisterRd = ID/EX.RegisterRs2)) ForwardB = 10</span><br><span class="line"></span><br><span class="line">2.MEM冒险<span class="built_in"></span></span><br><span class="line"><span class="built_in">if </span>(MEM/WB.RegWrite<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(MEM/WB.RegisterRd != 0)<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(MEM/WB.RegisterRd = ID/EX.RegisterRs1)) ForwardA = 01</span><br><span class="line"><span class="built_in"></span></span><br><span class="line"><span class="built_in">if </span>(MEM/WB.RegWrite<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(MEM/WB.RegisterRd != 0)<span class="built_in"></span></span><br><span class="line"><span class="built_in">and </span>(MEM/WB.RegisterRd = ID/EX.RegisterRs2)) ForwardB = 01</span><br></pre></td></tr></table></figure>

<h2 id="更为复杂的数据冒险"><a href="#更为复杂的数据冒险" class="headerlink" title="更为复杂的数据冒险"></a>更为复杂的数据冒险</h2><p>在 WB 阶段指令的结果， MEM 阶段指令的结果和 ALU 阶段指令的源操作数之间发生。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">add	x1, x1, x2</span><br><span class="line">add	x1, x1, x3</span><br><span class="line">add	x1, x1, x4</span><br></pre></td></tr></table></figure>
<p>在这种情况下，结果应该来自 MEM 阶段前递的数据( EX/MEM 寄存器的数据)，因为 MEM 阶段中的结果就是最近的结果。因此， MEM 冒险的控制为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (MEM/WB.RegWrite</span><br><span class="line">and (MEM/WB.RegisterRd != <span class="number">0</span>)</span><br><span class="line">and not (EX<span class="regexp">/MEM.RegWrite and (EX/</span>MEM.RegisterRd != <span class="number">0</span>)</span><br><span class="line">		and (EX<span class="regexp">/MEM.RegisterRd = ID/</span>EX.RegisterRs1))</span><br><span class="line">and (MEM<span class="regexp">/WB.RegisterRd = ID/</span>EX.RegisterRs1)) ForwardA = <span class="number">01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (MEM/WB.RegWrite</span><br><span class="line">and (MEM/WB.RegisterRd != <span class="number">0</span>)</span><br><span class="line">and not (EX<span class="regexp">/MEM.RegWrite and (EX/</span>MEM.RegisterRd != <span class="number">0</span>)</span><br><span class="line">		and (EX<span class="regexp">/MEM.RegisterRd = ID/</span>EX.RegisterRs2))</span><br><span class="line">and (MEM<span class="regexp">/WB.RegisterRd = ID/</span>EX.RegisterRs2)) ForwardB = <span class="number">01</span></span><br></pre></td></tr></table></figure>

<h2 id="数据冒险与停顿"><a href="#数据冒险与停顿" class="headerlink" title="数据冒险与停顿"></a>数据冒险与停顿</h2><p>当一条指令在加载指令写入一个寄存器之后读取这个寄存器，前递无法解决冒险。</p>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/data_hazard_and_stall_example.jpg" class="" title="加载指令导致前递无法解决的冒险">
<p>此时需要增加冒险检测单元添加流水线阻塞，阻塞条件为：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (ID/EX.MemRead and</span><br><span class="line">	((ID<span class="regexp">/EX.RegisterRd = IF/</span>ID.RegisterRs1) or</span><br><span class="line">	(ID<span class="regexp">/EX.RegisterRd = IF/</span>ID.RegisterRs2))) stall the pipeline</span><br></pre></td></tr></table></figure>
<p>阻塞的硬件实现：</p>
<ol>
<li>禁止 PC 寄存器和 IF/ID 流水线寄存器改变(保护寄存器)</li>
<li>EX 阶段开始的流水线后半部分执行 <strong>空指令</strong> ，解出 EX ， MEM 和 WB 阶段的七个控制信号(设置为0)</li>
</ol>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/pipeline_control.jpg" class="" title="流水线控制图概览">
<h1 id="控制冒险"><a href="#控制冒险" class="headerlink" title="控制冒险"></a>控制冒险</h1><h2 id="静态预测：假设分支不发生"><a href="#静态预测：假设分支不发生" class="headerlink" title="静态预测：假设分支不发生"></a>静态预测：假设分支不发生</h2><p>如果条件分支不发生的概率时 50% ，且丢弃指令的代价很小，这种优化可以减少一半由控制冒险带来的代价。</p>
<p>丢弃指令的硬件实现：</p>
<ol>
<li>将分支指令到达 MEM 阶段时 IF ， ID 和 EX 阶段的三条指令的控制信号置为0</li>
</ol>
<h2 id="缩短分支延迟"><a href="#缩短分支延迟" class="headerlink" title="缩短分支延迟"></a>缩短分支延迟</h2><p>将计算分支目标地址和判断分支条件提早发生(在 ID 阶段进行分支地址的计算和相等判断)。</p>
<p>困难：</p>
<ol>
<li>分支条件可能依赖于流水线上的结果，因此需要新的前递逻辑</li>
<li>在 ID 阶段分支比较需要的值可能之后才会产生( ALU 指令接着分支，加载指令接着分支)，流水线停顿是必须的</li>
</ol>
<p>清除IF阶段指令：添加一条 IF.Flush 控制线，将 IF/ID 流水线寄存器指令字段设置为 0 (空操作)。</p>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/reduce_branch_delay.png" class="" title="缩短分支延迟">
<p>优化能力：将分支发生的代价减轻为一条指令</p>
<h2 id="动态分支预测"><a href="#动态分支预测" class="headerlink" title="动态分支预测"></a>动态分支预测</h2><p>实现方案： <strong>分支预测缓存</strong> 或 <strong>分支历史表</strong> </p>
<p>分支预测缓存：一块按照分支指令的低位地址定位的小容量存储器，包含 1 个比特，用于表明一个分支最近是否发生跳转</p>
<p>缺点：即使一个分支条件总是发生跳转，但一旦其不发生跳转时，就会造成两次预测错误，而不是只造成一次错误</p>
<p>纠正： 2 位预测机制(有限状态自动机)</p>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/2bit_predictor.png" class="" title="2位预测机制的有限状态自动机">
<p>分支目标缓存：分支预测其只告知条件分支是否发生跳转，但依然需要对分支目标地址进行计算。在五级流水线中，这种计算需要一个时钟周期。一种解决方案是 <strong>缓存目标地址</strong></p>
<p>其他预测器：</p>
<ol>
<li>相关预测器：组合了特殊分支指令的局部行为和最近执行的一些分支指令的全局行为信息的分支预测器</li>
<li>锦标赛预测器：一个对于每个分支具有多种预测的分支预测器，其具有一种选择机制，该机制选择对于给定分支选择哪个预测器作为预测结果</li>
</ol>
<h1 id="异常和中断"><a href="#异常和中断" class="headerlink" title="异常和中断"></a>异常和中断</h1><h2 id="RISC-V体系结构中异常处理"><a href="#RISC-V体系结构中异常处理" class="headerlink" title="RISC-V体系结构中异常处理"></a>RISC-V体系结构中异常处理</h2><p>必须执行的基本动作：在 <strong>系统异常程序计数器(Supervisor Exception Program Counter， SEPC)</strong> 中保存发生异常的指令地址，同时将控制权转交给操作系统</p>
<p><strong>系统异常原因寄存器(Supervisor Exception Cause Register,  SCAUSE)</strong> ：记录异常产生原因</p>
<p><strong>向量式终端(vectored interrupt)</strong> ：用基址寄存器加上例外原因(作为偏移)作为目标地址来完成控制流转换</p>
<p>假设，我们使用统一入口地址方式（系统异常原因寄存器）实现异常处理，设置地址为 0x 0000 0000 1C09 0000。因此，需要添加两个额外的寄存器： </p>
<ol>
<li>SEPC：64位寄存器，保存异常指令的地址（向量式也需要）</li>
<li>SCAUSE：64位寄存器，大多数位未被使用</li>
</ol>
<h2 id="流水线实现中的异常"><a href="#流水线实现中的异常" class="headerlink" title="流水线实现中的异常"></a>流水线实现中的异常</h2><p>将异常处理堪称另一种控制冒险，清除掉异常指令之后的指令。与处理分支指令不同的是，异常会引起系统状态变化。</p>
<p>硬件实现：</p>
<ol>
<li>对进入译码阶段的指令，增加逻辑控制译码阶段的多选器输出为 0，流水线停顿</li>
<li>添加新的控制信号 ID.Flush，与来自冒险检测单元的 stall 信号进行或操作</li>
<li>添加新的控制信号 EX.Flush，杀跌多选器输出为 0</li>
<li>为 PC 多选器增加新的输入，保证能将例外入口地址送给 PC 寄存器</li>
</ol>
<img src="/2022/04/21/%E8%AE%A1%E7%BB%84%E7%AC%94%E8%AE%B01%EF%BC%9A%E6%B5%81%E6%B0%B4%E7%BA%BFCPU%E8%AE%BE%E8%AE%A1/pipeline_exception.png" class="" title="流水线异常处理">
<p>SEPC 寄存器保存引发例外的指令地址。如果由多个例外同时发生，SCAUSE 寄存器中记录当前最高优先级的例外信息。</p>
]]></content>
      <categories>
        <category>计算机体系结构</category>
      </categories>
      <tags>
        <tag>计算机组成与设计RISC-V笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>计网笔记1：基础</title>
    <url>/2022/04/22/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B01%EF%BC%9A%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><ul>
<li>URL： Uniform Resource Locator 统一资源定位符，提供了一种标识所有通过浏览器能浏览到的对象的方法</li>
<li>HTTP： Hyper Text Transfer Protocol 超文本传输协议</li>
<li>IP： Internet Protocol 网际协议</li>
<li>TCP： Transmission Control Protocol 传输控制协议</li>
<li>LAN： Local Area Networks 局域网，通常延伸不到 1 km</li>
<li>WAN： Wide Area Networks 广域网，通常可以再全球范围延伸</li>
<li>MAN： Metropolitan Area Networks 城域网，通常跨越数十千米</li>
<li>SAN： Storage Area Networks 存储区域网/系统区域网，通常局限于单个房间，用于连接大型计算系统的各个组件</li>
<li>link： 直接连接计算机的物理媒介</li>
<li>node： 被连接的计算机（硬件）</li>
<li>switch： 交换机，主要功能是存储和转发数据包</li>
<li>host：主机，支持用户使用并运行应用程序</li>
<li>router/gateway：路由器/网关，与交换机的作用大致相同</li>
<li>routering：路由，确定如何根据目标节点的地址将消息转发到目标节点的过程</li>
<li>QoS： quality of service，服务质量</li>
<li>FTP： File Transfer Protocol，文件传输协议</li>
<li>NFS： Network File System，网络文件系统</li>
<li>cliet：客户端，请求访问文件的进程</li>
<li>server：服务器，支持访问文件的进程</li>
</ul>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="可拓展的连接性"><a href="#可拓展的连接性" class="headerlink" title="可拓展的连接性"></a>可拓展的连接性</h2><h3 id="交换网"><a href="#交换网" class="headerlink" title="交换网"></a>交换网</h3><p>如果计算机网络仅限于所有节点通过物理媒介直接互联，那么任何一个网络的规模都是非常有限的，每个节点的管理也会变得非常困难，因此需要间接地连接计算机集合的方法。</p>
<img src="/2022/04/22/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B01%EF%BC%9A%E5%9F%BA%E7%A1%80/undirected_link_example.jpg" class="" title="交换网">
<p>连接到至少两个链路的节点将在一条链路上接受的数据转发到另一条链路，将转发过程系统组织起来，这些转发节点就形成了 <strong>交换网络</strong> 。</p>
<p>最常见的交换网络类型有：</p>
<ul>
<li>电路交换：用于电话系统（在光网络领域也很重要）。电路交换网络在一系列链路上建立专用电路，然后让源节点通过该电路将比特流发送到目标节点。</li>
<li>分组交换：用于绝大多数计算机网络。分组交换网络中的节点互相发送 <strong>离散的数据块</strong> ，将每个数据块称为 <strong>数据包(packet)或消息(message)</strong> 。分组交换网络使用 <strong>存储转发(store and forward)</strong> 的策略，即网络中的节点先通过链路接受一个完整的数据包并存储在内部存储器中，再将完整的数据包发送到下一个节点。</li>
</ul>
<p>使用分组交换的原因：效率。</p>
<h3 id="网络的互联"><a href="#网络的互联" class="headerlink" title="网络的互联"></a>网络的互联</h3>
<p>计算机间接连接的第二种方式就是一些独立的网络互联形成互联网(internetwork)。因此可以通过互联的方式递归地构建任意大型网络。</p>
<h3 id="消息的传递"><a href="#消息的传递" class="headerlink" title="消息的传递"></a>消息的传递</h3><p>需要通过分配地址给每个节点来区别不同节点。当源节点要给目标节点发送消息时，它需要能指定目标节点的地址。若两个节点不是直接连接的，则网络的交换机和路由器需要能根据此地址确定如何将消息转发到目的地。</p>
<p>同时，源节点可能希望将消息发送到单个目标节点  <strong>(unicast)</strong> ，也可能希望将消息广播<strong>(broadcast)</strong> 到网络上所有节点，或者可能希望发送给节点的某个子集发送消息 <strong>(multicast)</strong> 。因此，网络需要支持多播和广播地址。</p>
<h2 id="高性价比的资源共享"><a href="#高性价比的资源共享" class="headerlink" title="高性价比的资源共享"></a>高性价比的资源共享</h2><h3 id="主机如何共享网络：多路复用-multiplexing"><a href="#主机如何共享网络：多路复用-multiplexing" class="headerlink" title="主机如何共享网络：多路复用(multiplexing)"></a>主机如何共享网络：多路复用(multiplexing)</h3><p>将多个流多路复用到一个物理链路上的方法：</p>
<ul>
<li>同步时分复用(STDM，Synchronous Time-Division Multiplexing)，将时间划分成大小相等的分片，并以循环的方式为每个流提供通过物理链路发送数据的机会。</li>
<li>频分复用(FDM，Frequency-Division Multiplexing)，以不同的频率通过物理链路传输每个流。</li>
</ul>
<p>STDM 和 FDM 都有如下两个限制：</p>
<ol>
<li>如果一个流没有数据需要发送，就会导致物理链路（时间或是频率）处于空闲。</li>
<li>都仅限于最大流量数固定且提前知道的情况，在运行过程中重新调整物理资源分配的大小是不切实际的。</li>
</ol>
<p>统计多路复用(statistical multicomplexing)，两个关键思想：</p>
<ol>
<li>物理链路在时间上被共享，与 STDM 相同。与 STDM 不同的是，数据是按需使物理链路的，而不是在预定的时间段内传输。</li>
<li>设置每个流在给定时间传输的数据块的大小上限（通常被称为数据包），用于确保所有流都能有机会通过该物理链路传输。因此，数据发送端需要将消息划分为多个数据包，接收端需要将数据包重新组合成原始消息。</li>
</ol>
<p>交换机接受数据包的速度可能快于共享物理链路所能容纳的速度，因此需要强制交换机在内存中缓存这些数据包。如果接受数据包快于发送数据包，交换机会耗尽缓冲空间，并且必须丢弃某些数据包，交换机在这种情况下运行称为 <strong>拥塞(congested)</strong> 。</p>
<h2 id="支持通用服务"><a href="#支持通用服务" class="headerlink" title="支持通用服务"></a>支持通用服务</h2><p>目标：向应用程序隐藏网络的复杂性，同时不过度约束应用设计人员。</p>
<h3 id="确定通用通信模式"><a href="#确定通用通信模式" class="headerlink" title="确定通用通信模式"></a>确定通用通信模式</h3><p>了解典型应用程序的通信需求。</p>
<p>文件访问、数字图书馆和视频应用（视频会议和视频点播）作为示例，需要提供以下两种类型的信道：</p>
<ol>
<li><strong>请求/回复信道(request/reply channel)</strong> ，保证一方发送的每条消息都由另一方接受且每条消息只传递一个副本，同时保护信道传输数据的隐私性和完整性。</li>
<li><strong>消息流信道(message stream channel)</strong> ，消息流不需要保证传递所有信息，但是需要确保传递的消息以发送的顺序到达，同时可能希望确保视频数据的隐私性和完整性。为支持视频会议，消息流信道需要支持多播。</li>
</ol>
<p>网络设计者需要注意信道类型需要提供应用程序所需的语义，因此只要有新的应用程序，网络设计者就可能发明新型信道，并为现有信道添加选项。</p>
<h3 id="可靠消息传递"><a href="#可靠消息传递" class="headerlink" title="可靠消息传递"></a>可靠消息传递</h3><p>如上所述，可靠消息传递是网络索要提供的最重要的功能之一。</p>
<p>三种主要的网络失效：</p>
<ol>
<li><strong>位错误(bit errors)</strong> ，通常由于外部力量的干扰，但相当罕见（典型铜缆 $10^{-7}\sim10^{-6}$ ，典型光纤 $10^{-14}\sim10^{-12}$ ） 。</li>
<li><strong>数据包丢失</strong> ，可能由于位错误导致需要丢弃包，或者交换机发生了拥塞，或者某个节点的程序在处理数据包的时候发生了错误（将数据包转发到错误的链路上）。处理数据包丢失的主要困难之一是区分丢失和延迟。</li>
<li><strong>节点、链路级故障</strong> ，物理链路被切断或计算机崩溃。在分组交换网络中，可以绕开故障节点和链路路由。处理此类故障的困难之一在于区分故障计算机和仅运行缓慢的计算机、区分被切断的计算机和不稳定的计算机（导致大量位错误的计算机）。</li>
</ol>
<h2 id="可管理性"><a href="#可管理性" class="headerlink" title="可管理性"></a>可管理性</h2><p>配置上千个路由器并搞清楚为什么没有按预期的效果工作几乎超越了人类的能力，因此管理的自动化非常重要。</p>
<p>使网络更易于管理的一种基本方式：避免改变。</p>
<h1 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h1><h2 id="分层和协议"><a href="#分层和协议" class="headerlink" title="分层和协议"></a>分层和协议</h2><p>分层提供了两个有用的功能：</p>
<ol>
<li>将构建网络分解为更易于管理的组件。</li>
<li>提供了模块化设计，添加新的服务只需要修改部分层。</li>
</ol>
<p><strong>协议(protocols)</strong> ：构成网络系统的层的抽象对象，协议提供了与更高级别的对象交换信息的通信服务。</p>
<p>每个协议定义两个不同的接口：</p>
<ol>
<li>为同一台计算机上要使用它提供的通信服务的其他对象定义一个 <strong>服务接口(service interface)</strong> ，定义本地对象通过协议 <strong>可以执行的操作</strong> 。</li>
<li>为另一台计算机上的对等对象(counterpart)定义一个 <strong>对等接口(peer interface)</strong> ，定义协议的对等对象之间 <strong>交换消息的形式和消息的含义</strong> 。</li>
</ol>

<p>协议的两种不同的使用方式：</p>
<ol>
<li>抽象接口（服务接口定义的操作和对等方之间交换的消息的形式和含义），通常称为 <strong>协议规范(protocol specification)</strong> 。</li>
<li>实际实现接口的模块。</li>
</ol>
<p>挑战：同一规范的两个不同实现可以成功交换消息。</p>
<p>相互互操作(interoperate with each other)：两个或多个能够精确实现协议规范的协议模块。</p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>假设一个应用程序要通过给 RRP(Request/Reply Protocol) 传递消息来给对等对象发送消息。 RRP 必须将控制信息传递给对等对象来确定在收到消息时如何处理消息。 RRP 通过 <strong>添加一个头(header)</strong> 来执行这个操作。多数情况下，头信息被加到消息的前面，但是在某些情况下， <strong>控制信息在消息末尾发送，被称为 trailer</strong> 。头的确切格式有协议规范定义，消息的 <strong>其余部分</strong> 被称为消息的 <strong>正文(body)或有效负载(payload)</strong> 。</p>
<img src="/2022/04/22/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B01%EF%BC%9A%E5%9F%BA%E7%A1%80/encapulation.jpg" class="" title="封装">
<p>网络中的节点（交换机和路由器）可能会检查消息前面的 HHP(Host-to-Host Protocol)头。</p>
<h2 id="多路复用和多路分解"><a href="#多路复用和多路分解" class="headerlink" title="多路复用和多路分解"></a>多路复用和多路分解</h2><p>两个不同应用程序的消息通过源主机上的信道进行多路复用，然后多路分解到目标主机的对应应用程序。</p>
<p>实现方法： <strong>多路分解密钥(demultiplexing key, or demux key)</strong> 被包含在头中，记录消息所属的应用程序。</p>
<p>协议之间对于构建多路分解密钥的确切内容没有统一的意见，有些使用 8 bit，另一些使用 16 或 32 bit 。某些协议的头中只有一个多路分解字段，有些具有一堆多路分解字段。</p>
<h2 id="七层-OSI-模型"><a href="#七层-OSI-模型" class="headerlink" title="七层 OSI 模型"></a>七层 OSI 模型</h2><p>OSI： Open System Interconnection 开放系统互联</p>
<p>每层的功能：</p>
<ol>
<li>物理层(physical layer)：处理通过链路传输的原始比特信息流。</li>
<li>数据链路层(data link layer)：将比特信息流收集到帧(frame)中，网络适配器和在节点操作系统中运行的设备驱动程序通常实现数据链路级别的服务。</li>
<li>网络层(network layer)：处理分组交换网络中节点之间的路由，节点间交换的数据单元被称为数据包(packet)而不是帧。</li>
</ol>
<p>下三层在所有网络节点上实现，包括交换机和所有的外部主机。</p>
<ol>
<li>传输层(transport layer)：处理进程到进程信道的内容，交换的数据单元被称为消息。</li>
<li>会话层(session layer)：提供名称空间，将属于单个应用程序的不同传输流绑定在一起（如音频和视频）。</li>
<li>表示层(presentation layer)：处理对等对象间交换的数据格式，如整数的长度，传输字段的先后。</li>
<li>应用程序层(application layer)：包括 HTTP 之类的协议。</li>
</ol>
<h2 id="互联网架构"><a href="#互联网架构" class="headerlink" title="互联网架构"></a>互联网架构</h2><p>有时被称为 TCP/IP 架构（两个主要协议）。</p>
<img src="/2022/04/22/%E8%AE%A1%E7%BD%91%E7%AC%94%E8%AE%B01%EF%BC%9A%E5%9F%BA%E7%A1%80/internet_protocol_graph.jpg" class="" title="网络架构">
<p>$NET_1,NET_2$ ：由硬件的组合实现（网络适配器，网络设备驱动），例如以太网(Ethernet)和无线传输协议。</p>
<p>IP ：Internet Protocol，互联网协议，支持多种网络技术互联到单个逻辑的互联网。</p>
<p>TCP ：Transmission Control Protocol，传输控制协议，提供 <strong>可靠</strong> 字节流信道。</p>
<p>UDP ：User Datagram Protocol，用户数据报协议，提供 <strong>不可靠</strong> 数据报传递信道。</p>
<p>TCP 和 UDP 也被称为端到端协议。 </p>
<p>互联网架构与 OSI 模型的对应关系：</p>
<ul>
<li>应用层 - &gt; 第 7 层</li>
<li>传输层(TCP/UDP) - &gt; 第 4 层</li>
<li>IP 层 - &gt; 第 3 层</li>
<li>IP 下的链路或子网层 - &gt; 第 2 层</li>
</ul>
<p>三个特征：</p>
<ol>
<li>不是严格分层，应用程序 <strong>可以绕过</strong> 定义的 <strong>传输层</strong> ，直接使用 IP 或底层网络。</li>
<li>协议图顶部宽，中间窄，底部宽（沙漏设计理念）。IP 是体系结构的焦点，定义交换数据包的常用方法，将消息从 <strong>主机传递到主机</strong> 和提供 <strong>进程到进程</strong> 的通信服务完全分开。</li>
<li>必须同时存在协议规范和至少一个具有代表性的规范实现，才能将新协议包含到架构中。</li>
</ol>
<h1 id="网络软件"><a href="#网络软件" class="headerlink" title="网络软件"></a>网络软件</h1>]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网络：系统方法笔记</tag>
      </tags>
  </entry>
</search>
